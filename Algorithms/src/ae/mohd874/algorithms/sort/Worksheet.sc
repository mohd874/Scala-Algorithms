package ae.mohd874.algorithms.sort

import scala.util.Random

object Worksheet {
	//A small test
  val nums = List(4,5,8,1,7)                      //> nums  : List[Int] = List(4, 5, 8, 1, 7)
  
  //A challenge test
  val shuffled = Random.shuffle(((1 to 6000) toList))
                                                  //> shuffled  : List[Int] = List(3768, 4962, 1243, 3015, 1305, 4259, 1996, 4110,
                                                  //|  4623, 2739, 5548, 5137, 362, 5664, 3281, 5653, 4184, 1513, 3520, 1084, 1497
                                                  //| , 4350, 2672, 2870, 5259, 1181, 1476, 3844, 847, 775, 5512, 4131, 866, 2435,
                                                  //|  4433, 5161, 2660, 5177, 2032, 184, 3687, 1092, 346, 2997, 4900, 4872, 4265,
                                                  //|  4497, 5220, 5550, 1763, 1340, 4890, 747, 418, 3274, 4499, 3721, 5468, 3538,
                                                  //|  2423, 5012, 354, 4876, 1345, 610, 2555, 5264, 3460, 2710, 2518, 4762, 2604,
                                                  //|  1276, 2210, 2437, 4401, 644, 1916, 5551, 3210, 4635, 485, 467, 1737, 5569, 
                                                  //| 2333, 3671, 5975, 3592, 3909, 2630, 2607, 2519, 4839, 939, 5304, 1029, 4566,
                                                  //|  2522, 4251, 2693, 2182, 5069, 3577, 2670, 3295, 3247, 401, 479, 2548, 110, 
                                                  //| 3008, 132, 1634, 294, 2831, 1643, 3510, 5003, 2211, 5202, 1185, 4660, 1486, 
                                                  //| 1590, 5195, 4648, 5042, 5972, 5368, 5180, 5117, 3134, 2250, 3406, 1889, 4167
                                                  //| , 700, 1969, 759, 2949, 3426, 4181, 4874, 1199, 3706, 5324, 4577, 4200, 3133
                                                  //| , 2509, 1121, 5712, 951, 2388, 1256, 5089, 5607, 495, 4948, 234, 386, 5632, 
                                                  //| 1672, 5034, 5203, 3441, 2577, 2950, 94, 1980, 2799, 1729, 411, 3212, 5281, 4
                                                  //| 586, 3933, 289, 3797, 3598, 4101, 3780, 2455, 341, 958, 1774, 2369, 5408, 15
                                                  //| 43, 1396, 905, 3928, 277, 1955, 1668, 5844, 1362, 3152, 5967, 426, 5217, 552
                                                  //| 3, 3165, 4807, 128, 26, 5434, 2374, 1034, 5745, 1570, 1787, 1976, 5351, 735,
                                                  //|  813, 3901, 1249, 3199, 2943, 2969, 3151, 3957, 2743, 244, 5211, 4135, 2287,
                                                  //|  1183, 1727, 3480, 2444, 434, 521, 1741, 2113, 4981, 4910, 1410, 4633, 2394,
                                                  //|  1119, 4187, 1074, 3644, 5838, 5751, 1070, 1871, 1231, 2536, 459, 825, 5537,
                                                  //|  2260, 1773, 5080, 4351, 2960, 189, 4661, 1863, 5276, 2954, 1623, 5436, 176,
                                                  //|  5554, 3784, 3420, 884, 1728, 1960, 3417, 5292, 3282, 3341, 3915, 2275, 2085
                                                  //| , 74, 2639, 1687, 3529, 686, 4085, 3559, 688, 754, 410, 4666, 3919, 3464, 41
                                                  //| 16, 22, 1632, 2335, 4324, 635, 3635, 199, 5699, 865, 5116, 779, 307, 1225, 2
                                                  //| 905, 4113, 1575, 3090, 5224, 676, 4261, 999, 4333, 2
                                                  //| Output exceeds cutoff limit.
  //Define comparing function
  def less(x: Int, y: Int) = x < y                //> less: (x: Int, y: Int)Boolean
  
  //test all algorithms
  /*
  //selection Sort
  SelectionSort(less)(nums.toArray)
  SelectionSort(less)(shuffled.toArray)
  
  //Bubble Sort
  BubbleSort(less)(nums.toArray)
  BubbleSort(less)(shuffled.toArray)
  
  //Merge Sort
  MergeSort(less)(nums)
  MergeSort(less)(shuffled)
  
  //Tree Sort
  TreeSort(less)(nums)
  TreeSort(less)(shuffled)
  
  //Insertion Sort
  InsertionSort(less)(nums)
  InsertionSort(less)(shuffled)
  */
  
  //Quick Sort
  QuickSort(less)(nums)                           //> res0: List[Int] = List(1, 4, 5, 7, 8)
  QuickSort(less)(shuffled)                       //> res1: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16
                                                  //| , 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
                                                  //| , 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54
                                                  //| , 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73
                                                  //| , 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92
                                                  //| , 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 1
                                                  //| 09, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 12
                                                  //| 4, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139
                                                  //| , 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
                                                  //|  155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 
                                                  //| 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 1
                                                  //| 85, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 20
                                                  //| 0, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215
                                                  //| , 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
                                                  //|  231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 
                                                  //| 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 2
                                                  //| 61, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 27
                                                  //| 6, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291
                                                  //| , 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306,
                                                  //|  307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 
                                                  //| 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 3
                                                  //| 37, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 35
                                                  //| 2, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367
                                                  //| , 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382,
                                                  //|  383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 3
                                                  //| Output exceeds cutoff limit.
}